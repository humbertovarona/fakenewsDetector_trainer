
# Generated by CodiumAI

import unittest

class TestBuildRobustmodel(unittest.TestCase):

    #  The function should create a Sequential model with the correct layers.
    def test_create_sequential_model(self):
        # Arrange
        max_words = 1000
        max_sequence_length = 50
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        self.assertIsInstance(model, Sequential)
        self.assertEqual(len(model.layers), 6)
        self.assertIsInstance(model.layers[0], Embedding)
        self.assertIsInstance(model.layers[1], Bidirectional)
        self.assertIsInstance(model.layers[2], Bidirectional)
        self.assertIsInstance(model.layers[3], Dropout)
        self.assertIsInstance(model.layers[4], Dense)
        self.assertIsInstance(model.layers[5], Dense)

    #  The function should compile the model with the correct optimizer, loss function, and metrics.
    def test_compile_model(self):
        # Arrange
        max_words = 1000
        max_sequence_length = 50
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        self.assertEqual(model.optimizer, 'adam')
        self.assertEqual(model.loss, 'binary_crossentropy')
        self.assertEqual(model.metrics, ['accuracy'])

    #  The function should return the compiled model.
    def test_return_compiled_model(self):
        # Arrange
        max_words = 1000
        max_sequence_length = 50
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        self.assertIsInstance(model, Sequential)
        self.assertEqual(model.optimizer, 'adam')
        self.assertEqual(model.loss, 'binary_crossentropy')
        self.assertEqual(model.metrics, ['accuracy'])

    #  max_words and max_sequence_length are both 0.
    def test_zero_values(self):
        # Arrange
        max_words = 0
        max_sequence_length = 0
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        self.assertIsInstance(model, Sequential)

    #  max_words and max_sequence_length are both very large.
    def test_large_values(self):
        # Arrange
        max_words = 1000000
        max_sequence_length = 1000
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        self.assertIsInstance(model, Sequential)

    #  max_words is negative.
    def test_negative_max_words(self):
        # Arrange
        max_words = -1000
        max_sequence_length = 50
    
        # Act and Assert
        with self.assertRaises(ValueError):
            build_robustmodel(max_words, max_sequence_length)
