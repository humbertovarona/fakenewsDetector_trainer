
# Generated by CodiumAI

import pytest

class TestBuildRobustmodel:

    #  The function should create a Sequential model with the correct layers.
    def test_create_sequential_model(self):
        # Arrange
        max_words = 1000
        max_sequence_length = 100
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        assert isinstance(model, Sequential)
        assert len(model.layers) == 7
        assert isinstance(model.layers[0], Embedding)
        assert isinstance(model.layers[1], Bidirectional)
        assert isinstance(model.layers[2], Bidirectional)
        assert isinstance(model.layers[3], Dropout)
        assert isinstance(model.layers[4], Dense)
        assert isinstance(model.layers[5], Dense)
        assert model.layers[0].input_dim == max_words
        assert model.layers[0].output_dim == 128
        assert model.layers[0].input_length == max_sequence_length
        assert model.layers[1].layer.units == 64
        assert model.layers[2].layer.units == 64
        assert model.layers[3].rate == 0.5
        assert model.layers[4].units == 64
        assert model.layers[4].activation == 'relu'
        assert model.layers[5].units == 1
        assert model.layers[5].activation == 'sigmoid'
        assert isinstance(model.layers[5].kernel_regularizer, l2)
        assert model.layers[5].kernel_regularizer.l2 == 0.01

    #  The function should compile the model with the correct optimizer, loss function, and metrics.
    def test_compile_model(self):
        # Arrange
        max_words = 1000
        max_sequence_length = 100
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        assert model.optimizer == 'adam'
        assert model.loss == 'binary_crossentropy'
        assert model.metrics == ['accuracy']

    #  The function should return the compiled model.
    def test_return_compiled_model(self):
        # Arrange
        max_words = 1000
        max_sequence_length = 100
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        assert isinstance(model, Sequential)
        assert model.optimizer == 'adam'
        assert model.loss == 'binary_crossentropy'
        assert model.metrics == ['accuracy']

    #  max_words and max_sequence_length are both 0.
    def test_zero_max_words_and_max_sequence_length(self):
        # Arrange
        max_words = 0
        max_sequence_length = 0
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        assert isinstance(model, Sequential)
        assert len(model.layers) == 7

    #  max_words and max_sequence_length are both very large.
    def test_large_max_words_and_max_sequence_length(self):
        # Arrange
        max_words = 1000000
        max_sequence_length = 100000
    
        # Act
        model = build_robustmodel(max_words, max_sequence_length)
    
        # Assert
        assert isinstance(model, Sequential)
        assert len(model.layers) == 7

    #  max_words is negative.
    def test_negative_max_words(self):
        # Arrange
        max_words = -1000
        max_sequence_length = 100
    
        # Act and Assert
        with pytest.raises(ValueError):
            build_robustmodel(max_words, max_sequence_length)
