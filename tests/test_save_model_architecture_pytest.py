
# Generated by CodiumAI

import pytest

class TestSaveModelArchitecture:

    #  The function should successfully save the model architecture to the specified image file.
    def test_save_model_architecture_success(self):
        # Arrange
        model = create_model()  # Create a valid Keras model
        image_filename = "model_architecture.png"
    
        # Act
        save_model_architecture(model, image_filename)
    
        # Assert
        assert os.path.exists(image_filename)  # Check if the image file exists

    #  The saved image file should have the correct architecture of the model.
    def test_save_model_architecture_correct_architecture(self):
        # Arrange
        model = create_model()  # Create a valid Keras model
        image_filename = "model_architecture.png"
    
        # Act
        save_model_architecture(model, image_filename)
    
        # Assert
        # Check if the saved image file has the correct architecture of the model
        assert check_model_architecture(image_filename, model)

    #  The function should print a message indicating that the model architecture has been saved.
    def test_save_model_architecture_print_message(self, capsys):
        # Arrange
        model = create_model()  # Create a valid Keras model
        image_filename = "model_architecture.png"
    
        # Act
        save_model_architecture(model, image_filename)
    
        # Assert
        captured = capsys.readouterr()
        assert f"Architecture of the model saved in {image_filename}" in captured.out

    #  The function should raise an error if the model parameter is not a valid Keras model.
    def test_save_model_architecture_invalid_model(self):
        # Arrange
        model = "invalid_model"  # Invalid model
    
        # Act and Assert
        with pytest.raises(Exception):
            save_model_architecture(model, "model_architecture.png")

    #  The function should raise an error if the image_filename parameter is not a valid file path or if the directory to save the file does not exist.
    def test_save_model_architecture_invalid_image_filename(self):
        # Arrange
        model = create_model()  # Create a valid Keras model
        image_filename = "invalid_directory/model_architecture.png"  # Invalid image filename
    
        # Act and Assert
        with pytest.raises(Exception):
            save_model_architecture(model, image_filename)

    #  The function should be able to save the model architecture even if the model has no layers.
    def test_save_model_architecture_no_layers(self):
        # Arrange
        model = create_model_with_no_layers()  # Create a model with no layers
        image_filename = "model_architecture.png"
    
        # Act
        save_model_architecture(model, image_filename)
    
        # Assert
        assert os.path.exists(image_filename)  # Check if the image file exists
