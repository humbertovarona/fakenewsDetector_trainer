
# Generated by CodiumAI

import unittest

class TestPreprocessData(unittest.TestCase):

    #  The function should split the data into training and testing sets with a test size of 0.2 and a random state of 42.
    def test_split_data(self):
        # Arrange
        data = {
            'title': ['title1', 'title2', 'title3'],
            'text': ['text1', 'text2', 'text3'],
            'label': ['label1', 'label2', 'label3']
        }
    
        # Act
        X_train, X_test, y_train, y_test = preprocess_data(data)
    
        # Assert
        self.assertEqual(len(X_train), 2)
        self.assertEqual(len(X_test), 1)
        self.assertEqual(len(y_train), 2)
        self.assertEqual(len(y_test), 1)

    #  The function should concatenate the 'title' and 'text' columns of the input data into a single feature vector.
    def test_concatenate_features(self):
        # Arrange
        data = {
            'title': ['title1', 'title2', 'title3'],
            'text': ['text1', 'text2', 'text3'],
            'label': ['label1', 'label2', 'label3']
        }
    
        # Act
        X_train, X_test, y_train, y_test = preprocess_data(data)
    
        # Assert
        self.assertEqual(X_train[0], 'title1 text1')
        self.assertEqual(X_train[1], 'title2 text2')
        self.assertEqual(X_test[0], 'title3 text3')

    #  The function should encode the 'label' column of the input data using LabelEncoder.
    def test_encode_labels(self):
        # Arrange
        data = {
            'title': ['title1', 'title2', 'title3'],
            'text': ['text1', 'text2', 'text3'],
            'label': ['label1', 'label2', 'label3']
        }
    
        # Act
        X_train, X_test, y_train, y_test = preprocess_data(data)
    
        # Assert
        self.assertEqual(y_train[0], 0)
        self.assertEqual(y_train[1], 1)
        self.assertEqual(y_test[0], 2)

    #  The function should handle input data with missing values or NaN values.
    def test_missing_values(self):
        # Arrange
        data = {
            'title': ['title1', None, 'title3'],
            'text': ['text1', 'text2', None],
            'label': ['label1', 'label2', 'label3']
        }
    
        # Act
        X_train, X_test, y_train, y_test = preprocess_data(data)
    
        # Assert
        self.assertEqual(len(X_train), 2)
        self.assertEqual(len(X_test), 1)
        self.assertEqual(len(y_train), 2)
        self.assertEqual(len(y_test), 1)

    #  The function should handle input data with non-string values in the 'title' and 'text' columns.
    def test_non_string_values(self):
        # Arrange
        data = {
            'title': [1, 2, 3],
            'text': [4, 5, 6],
            'label': ['label1', 'label2', 'label3']
        }
    
        # Act
        X_train, X_test, y_train, y_test = preprocess_data(data)
    
        # Assert
        self.assertEqual(X_train[0], '1 4')
        self.assertEqual(X_train[1], '2 5')
        self.assertEqual(X_test[0], '3 6')

    #  The function should handle input data with non-categorical values in the 'label' column.
    def test_non_categorical_labels(self):
        # Arrange
        data = {
            'title': ['title1', 'title2', 'title3'],
            'text': ['text1', 'text2', 'text3'],
            'label': [1, 2, 3]
        }
    
        # Act
        X_train, X_test, y_train, y_test = preprocess_data(data)
    
        # Assert
        self.assertEqual(y_train[0], 0)
        self.assertEqual(y_train[1], 1)
        self.assertEqual(y_test[0], 2)
